{
  "version": 2,
  "outputCapture": "direct-nodejs",
  "$schema": "http://json-schema.org/schema",
  "title": "Test executor",
  "description": "",
  "type": "object",
  "properties": {
    "features": {
      "type": "string",
      "description": "Space or comma separated list of features to activate, or \"all\"."
    },
    "noDefaultFeatures": {
      "type": "boolean",
      "description": "Do not activate the `default` feature of the package."
    },
    "target": {
      "type": "string",
      "description": "Build for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets.\n\nThis may also be specified with the `build.target` [config value](https://doc.rust-lang.org/cargo/reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](https://doc.rust-lang.org/cargo/guide/build-cache.html) documentation for more details."
    },
    "release": {
      "type": "boolean",
      "description": "Build optimized artifacts with the `release` profile. See the [PROFILES](https://doc.rust-lang.org/cargo/commands/cargo-build.html#profiles) section for details on how this affects profile selection."
    },
    "targetDir": {
      "type": "string",
      "description": "Directory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](https://doc.rust-lang.org/cargo/reference/config.html). Defaults to `target` in the root of the workspace."
    },
    "verbose": {
      "type": "boolean",
      "description": "Use verbose output. May also be specified with the term.verbose [config value](https://doc.rust-lang.org/cargo/reference/config.html).",
      "alias": "v"
    },
    "veryVerbose": {
      "type": "boolean",
      "description": "Include extra output such as dependency warnings and build script output."
    },
    "quiet": {
      "type": "boolean",
      "description": "No output printed to stdout.",
      "alias": "q"
    },
    "messageFormat": {
      "type": "string",
      "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n  * `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n  * `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n  * `json`: Emit JSON messages to stdout. See [the reference](https://doc.rust-lang.org/cargo/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n  * `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with `human` or `short`.\n  * `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with `human` or `short`.\n  * `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`."
    },
    "locked": {
      "type": "boolean",
      "description": "Requires that the `Cargo.lock` file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error."
    },
    "frozen": {
      "type": "boolean",
      "description": "Like `locked`, but prevents Cargo from attempting to access the network to determine if `Cargo.lock` is out-of-date."
    },
    "offline": {
      "type": "boolean",
      "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible."
    },
    "toolchain": {
      "type": "string",
      "description": "See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work."
    }
  },
  "required": []
}
